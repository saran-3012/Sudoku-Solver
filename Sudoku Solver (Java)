import java.io.*; 
import java.util.*; 

public class Main
{
    public static int startIndex(int x){
        return 3*(x/3);
    }
    
    public static boolean canAssign(int[][] grid,int rowIndex,int colIndex,int num){
        for(int i=0;i<9;i++){
            if(grid[rowIndex][i]==num || grid[i][colIndex]==num)
                return false;
        }
        int x=startIndex(rowIndex),y=startIndex(colIndex);
        for(int i=x;i<x+3;i++){
            for(int j=y;j<y+3;j++){
                if(grid[i][j]==num)
                    return false;
            }
        }
        return true;
    }
    
    public static boolean solveSudoku(int[][] grid) {
        for (int row = 0; row < 9; row++) {
            for (int col = 0; col < 9; col++) {
                if (grid[row][col] == 0) {
                    for (int num = 1; num <= 9; num++) {
                        if (canAssign(grid, row, col, num)) {
                            grid[row][col] = num;

                            if (solveSudoku(grid)) {
                                return true;
                            }
                            grid[row][col] = 0;
                        }
                    }
                    return false;
                }
            }
        }
        return true;
    }
    
    public static void display(int[][] grid){
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                System.out.print(grid[i][j] + " ");
            }
            System.out.println();
        }
    }

	public static void main(String[] args) {
		Scanner scan=new Scanner(System.in);
		int[][] grid=new int[9][9];
		for(int i=0;i<9;i++){
		    for(int j=0;j<9;j++){
		        grid[i][j]=scan.nextInt();
		    }
		}
		
		if(solveSudoku(grid)){
		    System.out.println("Solution: ");
		    display(grid);
		}
		else{
		    System.out.print("CANNOT BE SOLVED");
		}
	}
}


/*
Test Case:

0 9 1 2 0 0 8 3 0
0 0 0 0 0 6 0 0 0
0 2 0 0 0 9 0 4 7
0 5 0 0 0 3 0 8 0
6 0 0 4 1 0 0 0 0
1 0 0 8 0 0 0 9 5
0 6 0 9 0 0 0 2 0
0 0 2 3 0 0 0 0 4
8 3 0 0 4 0 1 6 0

*/
