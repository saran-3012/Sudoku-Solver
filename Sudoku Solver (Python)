grid=[[0 for _ in range(9)] for _ in range(9)]

def startIndex(Index):
    return 3*(Index//3)
    
def canAssign(grid,row,col,num):
    for i in range(9):
        if grid[row][i]==num or grid[i][col]==num:
            return False
    for i in range(startIndex(row),startIndex(row)+3):
        for j in range(startIndex(col),startIndex(col)+3):
            if grid[i][j]==num:
                return False
    return True
    
def solveSudoku(grid):
    for row in range(9):
        for col in range(9):
            if grid[row][col]==0:
                for num in range(1,10):
                    if canAssign(grid,row,col,num):
                        grid[row][col]=num
                        if solveSudoku(grid):
                            return True
                        grid[row][col]=0 
                return False
    return True
    
def display(grid):
    for i in grid:
        for j in i:
            print(j,end=" ")
        print()
    
x,i,j=0,-1,-1
while True:
    x,i,j=map(int,input().split())
    if x==-1:
        break
    grid[i][j]=x

print("Sudoku Board:")
display(grid)

if solveSudoku(grid)==True:
    print("Solution:")
    display(grid)
else:
    print("Can't Solve")
    
    
'''
Test Case:

9 0 1
1 0 2
2 0 3
8 0 6    
3 0 7
6 1 5
2 2 1
9 2 5
4 2 7
7 2 8
5 3 1
3 3 5
8 3 7
6 4 0
4 4 3
1 4 4
1 5 0
8 5 3
9 5 7
5 5 8
6 6 1
9 6 3
2 6 7
2 7 2
3 7 3
4 7 8
8 8 0
3 8 1
4 8 4
1 8 6
6 8 7
-1 -1 -1
'''
